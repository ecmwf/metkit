import functools
import os
import yaml
from PDT import categories, categorySelectorsWithMappedPdt, categoriesWithAllPossibleValues, listAllCategoriesInOrder


def buildDecisionMap(subCatList, selector, mappedSelectorList):
    if len(subCatList) == 0:
        if len(mappedSelectorList) == 1:
            pdt = mappedSelectorList[0][3][0];
            return {"write": {"productDefinitionTemplateNumber": pdt}} 
        else:
            # Should not occur, as already checked
            raise ValueError("buildDecisionMap: selector {} matches multiple or no pdts: {}".format(selector, mappedSelectorList))

    else:
        cat = subCatList[0]
        allVals = categoriesWithAllPossibleValues[cat]

        valsInSelectors = set([])
        for selTuple in mappedSelectorList:
            sel = selTuple[0]
            valsInSelectors.add(sel[cat] if cat in sel.keys() else None)

        res = {
            "key": cat,
            "dict": "work",
            # "null-is-default": True,
            # "not-found-is-default": True,
            "value-map": {}
        }
        for val in valsInSelectors:
            def filterSelector(sel):
                if val is None:
                    if cat not in sel.keys():
                        return True
                    else:
                        return (sel[cat] is None)
                else:
                    if cat not in sel.keys():
                        return False
                    else:
                        return (sel[cat] == val)

            # Recursion on a proper selection
            selectorsForVal = [s for s in mappedSelectorList if filterSelector(s[0])]
            sub = buildDecisionMap(subCatList[1:], {cat: val, **selector}, selectorsForVal)
            
            
            if val is None:
                # If there is only 1 val and it is default, we can skip checking the whole category 
                if len(valsInSelectors) == 1:
                    return sub
                else:
                    res["default"] = sub
            else:
                res["value-map"][val] = sub

        return res
            
            
def main():
    categoryHandleOrder = listAllCategoriesInOrder(categories)
    decisionMap=buildDecisionMap(categoryHandleOrder, {}, categorySelectorsWithMappedPdt)

    with open('./rules/CategoriesToPDT.yaml', "w") as f:
        f.write(
            "# File automatically generated by %s\n# Do not edit\n\n"
            % (os.path.basename(__file__))
        )
        f.write(yaml.safe_dump(decisionMap, default_flow_style=False, sort_keys=False))

if __name__ == "__main__":
    main()
